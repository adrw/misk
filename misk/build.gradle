import org.junit.platform.console.options.Details
import groovy.json.JsonSlurper

apply plugin: 'kotlin'
kotlin {
  experimental {
    coroutines 'enable'
  }
}
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.vanniktech.maven.publish'

compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
    allWarningsAsErrors = true
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
    allWarningsAsErrors = true
  }
}

sourceSets {
  main.java.srcDirs += 'src/main/kotlin/'
  test.java.srcDirs += 'src/test/kotlin/'
  main.resources {
    srcDirs += [
      'web/@misk/common/lib',
      'web/@misk/components/lib',
      'web/@misk/dev/lib',
      'web/@misk/tslint/lib',
      'web/tabs/config/lib',
      'web/tabs/example/lib',
      'web/tabs/loader/lib'
    ]
    exclude '**/node_modules'
  }
}

junitPlatform {
  details Details.VERBOSE
}

dependencies {
  compile dep.kotlinStdLib
  compile dep.kotlinTest
  compile dep.bouncycastle
  compile dep.guava
  compile dep.guice
  compile dep.guiceMultibindings
  compile dep.javaxInject
  compile dep.okHttp
  compile dep.okio
  compile dep.kotlinReflection
  compile dep.moshi
  compile dep.conscrypt
  compile dep.jettyAlpnConscypt
  compile dep.jettyHttp2
  compile dep.jettyServer
  compile dep.servletApi
  compile dep.jettyServlet
  compile dep.jettyWebsocketServlet
  compile dep.jettyWebsocketServer
  compile dep.kubernetesClient
  compile dep.wireRuntime
  compile dep.loggingApi
  compile dep.jacksonDatabind
  compile dep.jacksonDataformatYaml
  compile dep.jacksonKotlin
  compile dep.jacksonJsr310
  compile dep.jCommander
  compile dep.openTracing
  compile dep.openTracingUtil
  compile dep.openTracingOkHttp
  compile dep.retrofit
  compile dep.retrofitMoshi
  compile dep.retrofitWire
  compile dep.logbackClassic
  compile dep.slf4jApi
  compile dep.jaxbApi
  compile dep.prometheusClient
  compile dep.prometheusHotspot

  testCompile dep.kotlinxCoroutines
  testCompile dep.mockitoCore
  testCompile project(':misk-testing')
}

task web(type: Exec) {
  // -Pcmd='-d': pass in argument to misk-web shell script in Docker container
  // -Ptabs='tabs/config, tabs/example': spins up parallel Docker containers with the following paths as volumes
  // -Pdockerd: boolean to run Docker container as daemon in background
  // Running webpack-dev-servers for various tabs: ./gradlew web -Pcmd='-d' -Ptabs='tabs/config, tabs/example'
  // Build all tabs: ./gradlew web
  // See other misk-web options: ./gradlew web -Pcmd='-h'

  def generateDockerContainerName = { service, project, task ->
    def slug = task.split('/').join('-').split('@').join('')
    return "${new Date().format("YMD-HMS")}-${service}-${project}${slug}"
  }

  def getPackageJsonPort = { path ->
    def packageFile= new File("${project.projectDir}/web/${path}/package.json")
    def packageJson = new JsonSlurper().parseText(packageFile.text)
    return packageJson.miskTab.port
  }

  def generateDockerRunCommand = { service, project, projectPath, path, cmd, daemon="-d", image = "squareup/misk-web:0.0.1" ->
    def containerName = "${generateDockerContainerName(service, project, path)}"
    def port = ""
    if (path.startsWith("/tabs")) {
      port = "-p ${getPackageJsonPort(path)}:${getPackageJsonPort(path)}"
    }

    def command = "docker run ${daemon} --rm --name ${containerName} -v ${projectPath}/web${path}:/web${path} ${port} ${image} ${cmd}"
    println "\nContainer: ${containerName}"
    println "Running... \$ ${command}"
    println "Logs       \$ docker logs -f ${containerName}"
    println "Shut Down  \$ docker kill ${containerName}"
    return command
  }

  def cmd = ""
  if (project.hasProperty("cmd")) {
    cmd = project.cmd
  } else {
    cmd = "-b"
  }

  def dockerd = ""
  if (project.hasProperty("dockerd")) {
    dockerd = "-d"
  }

  def runCommand = ""
  if (project.hasProperty("tabs")) {
    if (project.tabs.split(',').length > 1) {
      dockerd = "-d"
    }

    project.tabs.split(',').each {
      def command = generateDockerRunCommand('misk', 'misk', project.projectDir, "/$it", "/bin/misk-web ${cmd}", dockerd)
      if (runCommand != "") {
        runCommand += " && "
      }
      runCommand += command
    }
  } else {
    runCommand = generateDockerRunCommand('misk', 'misk', project.projectDir, "", "/bin/misk-web ${cmd}", dockerd)
  }

  commandLine 'sh', '-c', runCommand
}

jar.dependsOn web

if (rootProject.file("hooks.gradle").exists()) {
  apply from: rootProject.file("hooks.gradle")
}
