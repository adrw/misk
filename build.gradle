plugins {
  id "org.jetbrains.kotlin.jvm" version "1.3.11" apply false
  id "com.vanniktech.maven.publish" version "0.4.0" apply false
  id "misk-web-plugin" version "2019.02.07-b6607a9" apply false
}

ext {
  isCi = "true".equals(System.getenv('CI'))
  isSqCi = "true".equals(System.getenv('SQCI'))
  rep = null
}
apply from: file("./dependencies.gradle")

if (rootProject.file("repositories.gradle").exists()) {
  apply from: rootProject.file("repositories.gradle")
}

subprojects {
  apply plugin: "java"
  apply plugin: 'kotlin'
  buildscript {
    repositories {
      mavenCentral()
      jcenter()
      if (rep != null) {
        if (rep.maven) {
          for (Map.Entry<String, String> repEntry : rep.maven) {
            maven {
              url repEntry.value
            }
          }
        }
      }
    }

    dependencies {
      classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
  }
  repositories {
    mavenCentral()
    jcenter()
    if (rep != null) {
      if (rep.maven) {
        for (Map.Entry<String, String> repEntry : rep.maven) {
          maven {
            url repEntry.value
          }
        }
      }
    }
  }
  compileKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
      allWarningsAsErrors = true
    }
  }
  compileTestKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
      allWarningsAsErrors = true
    }
  } 
  sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
  }
  
  dependencies {
    testImplementation dep.junitApi
    testRuntimeOnly dep.junitEngine
  }
  test {
    useJUnitPlatform()
    testLogging {
      events "started", "passed", "skipped", "failed"
      exceptionFormat = 'full'
    }
  }
  if (rootProject.file("hooks.gradle").exists()) {
    apply from: rootProject.file("hooks.gradle")
  }
}

